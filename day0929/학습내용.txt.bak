** 비교연산자
두개의 값을 서로 비교하기 위한 연산자들
>   크다 
<   작다
>=  크거나 같다
<=  작거나 같다
==  같다

크거나 같은지 판별하기 위해서는 
공백없이 > 기호와 = 기호를 붙여서 사용해야 하고,
순서도 바꾸면 안됨
ex) > = 공백을 포함시키면 동작하지 않음
    => 순서를 바꾸어도 동작하지 않음
작거나 같은지 물어볼 때도 마찬가지로 정해진대로 사용해야함!

이러한 비교연산의 결과는 boolean 자료형이다!(true나 false)
동작시켜야 할 문장이 달라질때 사용하는 선택문(if-else)의 조건식에서 주로 사용됨

---------------------------------------------------------------
** 논리연산자
&& (논리곱) : 2개의 조건식을 모두 만족하는지 판별하고자 할 때 사용
|| (논리합) : 2개의 조건식 중에 하나라도 만족하는지 판별하고자 할 때 사용

논리연산자도 비교연산자와 마찬가지로 선택문(if-else)의 조건식에서 주로 사용됨

2개의 조건식이 모두 만족하는지 판별해야 하는 경우 논리곱(&&)사용
if(조건식1 && 조건식2) 2개다 만족하니?
2개의 조건식 중에 하나라도 만족하는지 판별해야 하는 경우 논리합(||)사용
if(조건식1 || 조건식2) 2개 중 1개 만족하니?

---------------------------------------------------------------
** 비트연산자
비트의 상태(2진수의 상태. 즉 0과 1로 구성된 상태)에서 수행하는 연산자
& (비트곱)  : 2개의 비트가 모두 1이면 1 / 그렇지 않으면 0이 됨
| (비트합)  : 2개의 비트 중에 하나라도 1이면 1 / 그렇지 않으면 0이 됨
^ (비트차)  : 2개의 비트가 서로 다르면 1 / 그렇지 않으면(같으면) 0이 됨  //서로 다른지 묻는 것

x   y   x&y   x|y   x^y
------------------------
0   0    0     0     0
0   1    0     1     1
1   0    0     1     1
1   1    1     1     0


----------------------------------------------------------------
비트연산자 중에 비트곱(&)과 비트합(|)은
논리연산자로도 사용할 수 있음!
논리연산자(&&)과 비트연산자(&) 모두
두개의 조건식을 모두 만족하는지 판별하는 용도로 사용할 수 있음
ex) if(kor >= 90 && avg >=90)
    if(age1 >= 20 & age2 >= 20)

그러나! 논리연산자(&&)는 비트연산자(&)보다 짧은 연산을 수행함
두개의 조건식을 모두 만족해야만 전체를 참으로 처리하는 연산이기 때문에
논리연산자(&&)는 만약 첫번째 조건식이 거짓이라면 두번째 조건식은 수행하지 않음

&&, ||을 short cut operator라고 함
&&은 앞의 조건식이 거짓이면 뒤에 있는 조건식을 수행하지 않음(앞에가 거짓이면 뒤도 거짓으로 취급)
||은 앞의 조건식이 참이면 뒤에 있는 조건식을 수행하지 않음(앞에가 참이면 뒤는 상관없어)
----------------------------------------------------------------
**비트 이동연산자(Shift연산자)
비트의 상태에서 각각의 비트를 이동시키는 연산자임
<< : 비트를 왼쪽으로 이동시키는 연산자
       왼쪽으로 1비트 이동시킬 때 마다 *2한 결과가 됨
       왼쪽으로 갈수록 숫자가 커짐!

>> : 비트를 오른쪽으로 이동시키는 연산자
       오른쪽으로 1비트 이동시킬 때 마다 /2한 결과가 됨
       오른쪽으로 갈수록 숫자가 작아짐!

ex) 4를 이진수로 생각해보면?  1 0 0 
0 0 0 0 0 1 0 0        : 4
-----------------------------
0 0 0 0 1 0 0 0        : 4 << 1 = 8  

[왼쪽으로 이동]

ex) 4를 이진수로 생각해보면?  1 0 0
0 0 0 0 0 1 0 0        : 4
------------------------------
0 0 0 0 0 0 1 0        : 4 >> 1 = 2

[오른쪽으로 이동]

비트 이동연산자 중에 다음과 같이 오른쪽으로 >>> 연산자가 있음
왼쪽으로 가는 <<< 연산자는 없음

>>>은 무작위수(난수, 임의의 수 아무거나 만들 때)
음수던 양수던 무조건 새로 채워지는 비트를 0으로 채워
양수를 만드는 용도로 자주 사용됨
>>>을 수행한 결과를 예측하는 것은 너무 커서 의미가 없고
임의의 무작위 수를 만들어 무조건 양수 만드는 용도로 사용됨
----------------------------------------------------------------
**삼항연산자(조건식연산자)
(항1)?항2:항3
항1에는 조건식이 오며 
만약 항1에 조건식이 true이면 항2를 수행하고,
만약 항1에 조건식이 false이면 항3을 수행함

항이 3개가 있어 삼항식연산자라고도 하고
연산자에 조건식이 있다하여 조건식연산자라고도 함

짧은(간단한) if else 줄여놓은 표현임

ex) 
int a =5;
int b = (a>0)?100:0;
System.out.println(b);
출력결과: 100

ex)
int data = 5;
System.out.println((data>0)?"OK":"NO");
출력결과: OK
-----------------------------------------------------------------
**복합치환연산자
변수에 연수를 수행하여 그 결과를 다시 변수에 대입하는 연산자들
증감연산자랑 관련 있는 듯?ㅎ

+=
-=
*=
/+
%=
>>=
<<=

int a = 5;
a *= 2;    //이것은 a=a*2를 의미함
System.out.println(a);
출력결과:10

int b = 5;
b -= 3;    //이것은 b=b-3을 의미함
System.out.println(b);
출력결과:2

//연습)다음의 문장에 해당하는 조건식을 쓰세요

x는 0이 아니다                x!=0
x는 짝수이다                  x%2==0
x는 3과 같거나 7 이하이다        x==3 | x<=7
x가 0 이상이거나 100 미만이다     x>=0 | x<100
x는 0도 1도 아니다             x!=0 & x!=1
x가 y보다 작고 z보다 작다        x<y && x<z













