**for문을 사용하는 형식
for(초기값; 조건식; 증감식){
      반복실행할 명령어들
}

일반적으로 위와 같이 for괄호안에 세미콜론을 두개 적어주고
왼쪽에 반복시킬 조건식의 초기값, 가운데에 조건식, 맨 오른쪽에 증감식을 써줌

그런데 for괄호안에 세미콜론만 두개오고
초기값,조건식,증감식이 없어도 문장이 성립함
ex)
for(;;){
System.out.println("hello");
}
정상적으로 동작함
그러나 초기값,조건식,증감식이 없으므로 늘(언제라도) 참이 되는 구조임
따라서 위의 코드는 "hello"을 화면에 끝없이 출력하게 됨

위의 구조를 사용하여 즉, 세미콜론 왼쪽에 초기값,가운데 조건식,오른쪽에 증감식을 두지 않고
위의 구조를 따르면서 for문이 오기 전에 초기값을 주고
조건식과 증감식을 for문 속에 두어 반복할 횟수를 정할 수 있음
ex) 
int i=1;
for(;;){
   System.out.pritnln("hello");
   if(i>=3){
        break;
	}
	i++;
   }

------------------------------------------------
[while문의 형식]

초기값;
while(조건식){
      반복할 명령어들
      증감식;
      }

초기값 미리선언, while괄호 안에 조건식작성, 증감식은 while문 안에 작성
---------------------------------------------------
[do while문의 형식]

초기값;
do{
   반복 수행할 명령어들;
   증감식;
}while(조건식);
---------------------------------------------------
[while문과 do while문의 차이점]

while문과 do while문은 사용하는 방법이 유사한데
차이점은 만약 처음부터 조건을 만족하지 않은 상황이라면
while문은 반복문을 한번도 실행하지 않을 수 있지만
조건을 나중에 비교하는 do while문은 어찌됬던 do문을 적어도 한번은 실행함
(조건식이 나중에 오니까 조건식을 비교하기 전에 이미 실행은 함)

ex)조건을 만족하지 않아서 while문 실행 안함

int i=100;
while(i<=3){
	System.out.println("hello");
	i++;
}

ex)처음부터 조건 만족하지 않아도 조건을 나중에 판별하니까 어쨌든 do문 실행함

int i=100;
do{
	System.out.println("hello");
	i++;
}while(i<=3);

-----------------------------------------------------
**반복문이 3가지(for,while,do while)가 있는데
어떤 상황에 어떤 것을 사용하는 것이 좋은가요?
>> 반드시 이럴때는 이것을 써라는 없고 자유롭게 쓰면 됨

1)그러나 일반적으로 반복실행 해야할 횟수가 정해진 경우는 for를 많이 사용
2)사용자의 입력값(혹은 조건)이 만족할 동안 계속해서 동작해야 하는 경우 
while이나 do while사용
3)한 번 동작해야 하는 경우라면 do while 사용

<<반복문을 이용해 제대로 된 값을 입력할 때까지 입력받기-그렇지 않으면 문장 계속반복>>
for(;;){
	System.out.print("월을 입력하세요.==>");
	month = sc.nextInt();
	if(month>=1 && month <=12){
		break;
	}
}


---

while(true){
	System.out.print("월을 입력하세요.==>");
	month = sc.nextInt();
	if(month>=1 && month <=12){
		break;
	}
}

---
do{
	System.out.print("월을 입력하세요.==>");
	month = sc.nextInt();
	if(month>=1 && month <=12){
		break;
	}
	}while(true);
-----------------------------------------------------
<<배열의 요소만큼 반복 실행하기>>
int[] data = {10,20,30,40,50};
위와 같은 배열의 요소만큼 반복 실행하려면 다음과 같이 반복문을 사용함

for(int i=0; i<data.length; i++){
	System.out.println(data[i]);
}

-----
int i=0;
while(i<data.length){
	System.out.println(data[i]);
	i++;
}
------
int i=0;
do{
	System.out.pritnln(data[i]);
	i++;
}while(i<data.length);

위와 같은 반복문(for,while,do while)을 사용해 배열의 인덱스만큼 증가시켜
배열의 요소에 접근가능함

그런데, 자바에서 배열의 요소만큼 반복 실행하기 위한 향상된 반복문(for-each)을 제공함

[for-each 반복문의 형식]
for(자료형 변수명 : 배열이름){
	반복실행시킬 명령어들
}

for 괄호안에 콜론이 오고 오른쪽에는 배열이름을 써줌
콜론 왼쪽에 배열의 요소를 하나씩 꺼집어 내어올 변수이름을 자료형과 함께 써줌
즉, 배열의 요소를 차례로 꺼내와서 변수에 담기게 됨
하나씩 꺼집어 내어와서 담을 변수의 자료형은 배열의 자료형과 일치되게 써야함

int[] kor = {10,20,30,40,50}
위의 배열의 요소만큼 반복 실행시키는 명령을 for each로 표현함
for(int v : kor){      
	System.out.print(v)
}
//kor배열에 있는 원소를 하나씩 꺼집어 내어와서 v에 담으라는 뜻
맨처음 꺼내온 10이 v에 담기고 그다음 20이 v에 담김
배열의 원소를 차례대로 배열의 원소만큼 실행함








